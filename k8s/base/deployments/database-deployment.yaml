apiVersion: apps/v1
kind: Deployment
metadata:
  name:  pg-deployment
  namespace: dev
  labels:
    app:  pg-deployment
spec:
  selector:
    matchLabels:
      app: pg-deployment
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  pg-deployment
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  pg-deployment-container
        image:  postgres:17
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_status/healthz
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        envFrom:
            - configMapRef:
                name: database-configmap
            - secretRef:
                name: database-secrets
        ports:
        - containerPort:  80
        volumeMounts:
        - name: postgres-storage
          mountPath: "/var/lib/postgresql/data"
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
      restartPolicy: Always