
services:
  observability:
    image: observability
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: app_service
    environment:
      NODE_ENV: production
      DB_HOST: database   
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    env_file:
      - .env
    ports:
      - 3000:3000
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_network

  database:
    build:
      context: ./src/infra/database
      dockerfile: Dockerfile
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    environment:  
      DB_HOST: database   
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - 5434:5432
    volumes:
      - ./src/infra/database/data:/var/lib/postgresql/data
      - ./src/infra/database/etc/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./src/infra/database/etc/pg_hba.conf:/etc/postgresql/pg_hba.conf
    healthcheck:  # Add health check to ensure PostgreSQL is ready
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 5s
      retries: 5
      start_period: 10s
    networks:
      - app_network
    
  # PostgreSQL Exporter to expose DB metrics
  postgres_exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres_exporter
    environment:
      # DATA_SOURCE_NAME format: postgresql://<user>:<password>@<host>:<port>/<database>?sslmode=disable
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@postgres_db:5432/${DB_NAME}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - database
    networks:
      - app_network
  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    ports:
      - "9100:9100"
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev)($$|/)'
    networks:
      - app_network
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./src/infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - app_network
    depends_on:
      - observability
      - postgres_exporter
      - node_exporter

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3001:3000
    depends_on:
      - prometheus
    networks:
      - app_network
    volumes:
      - ./src/infra/grafana/data:/var/lib/grafana

volumes:
  postgres_data:
  grafana_data:

networks:
  app_network:
    driver: bridge